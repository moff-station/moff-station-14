using System.Linq;
using Content.Shared.SprayPainter.GasTanks;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.SprayPainter.GasTanks.UI;

[GenerateTypedNameReferences]
public sealed partial class GasTankPainterWindow : Control
{
    [Dependency] private readonly IEntitySystemManager _sysMan = default!;
    [Dependency] private readonly IEntityManager _entMan = default!;
    [Dependency] private readonly ILocalizationManager _loc = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;

    private static readonly EntProtoId DummyPrototype = "OxygenTank";

    public GasTankPainterWindow(
        GasTankVisuals initialValues,
        Action<GasTankVisuals> onStylePicked
    )
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        var gasTankPainter = _sysMan.GetEntitySystem<GasTankPainterSystem>();

        var previewDummy = _entMan.Spawn(DummyPrototype);
        Preview.SetEntity(previewDummy);

        foreach (var style in _proto.EnumeratePrototypes<GasTankVisualStylePrototype>()
                     .Select(style => (Name: _loc.GetString(style.Name), style.Visuals))
                     .OrderBy(tuple => tuple.Name))
        {
            StyleList.AddItem(_loc.GetString(style.Name), metadata: style.Visuals);
        }

        // Set the initial values of the sliders.
        SetColorSelections(initialValues);

        // Set the visuals for the dummy immediately.
        gasTankPainter.SetTankVisuals(previewDummy, GetVisuals());

        TankColor.OnColorChanged += OnColorsChanged;
        MiddleStripeColor.OnColorChanged += OnColorsChanged;
        LowerStripeColor.OnColorChanged += OnColorsChanged;
        UseMiddleStripe.OnToggled += OnColorsChanged;
        UseLowerStripe.OnToggled += OnColorsChanged;

        StyleList.OnItemSelected += args =>
        {
            var visuals = (GasTankVisuals)StyleList[args.ItemIndex].Metadata!;
            // Update color sliders. This'll indirectly update the component.
            SetColorSelections(visuals);
            OnColorsChanged(args);
        };
        return;

        void OnColorsChanged<T>(T args)
        {
            var visuals = GetVisuals();
            onStylePicked(visuals);
            // Update the preview immediately.
            gasTankPainter.SetTankVisuals(previewDummy, visuals);
        }
    }

    private void SetColorSelections(GasTankVisuals visuals)
    {
        TankColor.Color = visuals.TankColor;
        MiddleStripeColor.Color = visuals.MiddleStripeColor ?? Color.White;
        UseMiddleStripe.Pressed = visuals.MiddleStripeColor != null;
        LowerStripeColor.Color = visuals.LowerStripeColor ?? Color.White;
        UseLowerStripe.Pressed = visuals.LowerStripeColor != null;
    }

    private GasTankVisuals GetVisuals()
    {
        return new GasTankVisuals(
            TankColor.Color,
            UseMiddleStripe.Pressed ? MiddleStripeColor.Color : null,
            UseLowerStripe.Pressed ? LowerStripeColor.Color : null
        );
    }
}
