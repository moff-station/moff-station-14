using System.Linq;
using Content.Shared._Moffstation.Atmos.EntitySystems;
using Content.Shared._Moffstation.Atmos.Visuals;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._Moffstation.SprayPainter.UI;

[GenerateTypedNameReferences]
public sealed partial class GasTankPainterWindow : Control
{
    private event Action<GasTankVisuals>? OnVisualsPicked;

    [Dependency] private readonly IEntitySystemManager _sysMan = default!;
    [Dependency] private readonly IEntityManager _entMan = default!;
    [Dependency] private readonly ILocalizationManager _loc = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;
    private readonly GasTankVisualsSystem _gasTankVisuals;

    private static readonly EntProtoId DummyPrototype = "OxygenTank";

    private readonly Dictionary<GasTankVisualStylePrototype, int> _stylesToListIndeces = new();

    private bool _suppressSelectingStyleCallback = false;
    private bool _suppressChangingColorsCallbackAndPreviewUpdate = false;

    /// <summary>
    /// This generic function is used as the callback for all of the color sliders and "use this stripe" checkboxes.
    /// </summary>
    private void OnColorsChanged<T>(T unused)
    {
        if (_suppressChangingColorsCallbackAndPreviewUpdate)
            return;

        // Deselect any predefined styles if we're changing color values directly.
        StyleList.ClearSelected();

        var colors = new GasTankColorValues(
            TankColor.Color,
            UseMiddleStripe.Pressed ? MiddleStripeColor.Color : null,
            UseLowerStripe.Pressed ? LowerStripeColor.Color : null
        );
        OnVisualsPicked?.Invoke(colors);
        UpdatePreview(colors);
    }

    /// <param name="onVisualsPicked">The behavior to invoke when the configured visuals are changed.</param>
    public GasTankPainterWindow(Action<GasTankVisuals>? onVisualsPicked)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _gasTankVisuals = _sysMan.GetEntitySystem<GasTankVisualsSystem>();

        OnVisualsPicked = onVisualsPicked;

        // Initialize the preview dummy entity.
        Preview.SetEntity(_entMan.Spawn(DummyPrototype));

        // Initialize the list of style prototypes.
        var sortedStyles = _proto.EnumeratePrototypes<GasTankVisualStylePrototype>()
            .Select(style => (_loc.GetString(style.Name), style))
            .OrderBy(it => it.Item1);
        foreach (var (index, (localizedName, style)) in sortedStyles.Index())
        {
            StyleList.AddItem(localizedName, metadata: style);
            _stylesToListIndeces.Add(style, index);
        }

        // Selecting a style sets the color slider values (without those invoking the "we have changed the
        // configuration" or the "update the preview" callbacks), updates the preview's visuals, and invokes the "we
        // have changed the configuration" callback.
        StyleList.OnItemSelected += args =>
        {
            var style = (GasTankVisualStylePrototype)args.ItemList[args.ItemIndex].Metadata!;
            SetColorSliderValues(style.ColorValues);
            UpdatePreview(style.ColorValues);
            if (!_suppressSelectingStyleCallback)
                OnVisualsPicked?.Invoke(style);
        };

        // Changing the color sliders or checkboxes invokes the "we have changed the configuration" callback and updates
        // the preview.
        TankColor.OnColorChanged += OnColorsChanged;
        MiddleStripeColor.OnColorChanged += OnColorsChanged;
        LowerStripeColor.OnColorChanged += OnColorsChanged;
        UseMiddleStripe.OnToggled += OnColorsChanged;
        UseLowerStripe.OnToggled += OnColorsChanged;
    }

    private void UpdatePreview(GasTankColorValues colorValues)
    {
        if (Preview.Entity is { } entity)
        {
            _gasTankVisuals.TrySetTankVisuals(entity.Owner, colorValues);
        }
    }

    public void SetVisuals(GasTankVisuals visuals)
    {
        switch (visuals)
        {
            case GasTankVisuals.GasTankVisualsPrototype p when _proto.TryIndex(p.Prototype, out var prototype):
            {
                SetSelectedStyle(prototype);
                break;
            }
            case GasTankVisuals.GasTankVisualsColorValues v:
                SetColorSliderValues(v.Values);
                break;
        }
    }

    private void SetSelectedStyle(GasTankVisualStylePrototype style)
    {
        if (!_stylesToListIndeces.TryGetValue(style, out var index))
            return;

        // Suppress the callback which might eventually cause re-entrance to this function.
        _suppressSelectingStyleCallback = true;

        if (!StyleList[index].Selected)
        {
            bool cat = false;
        }

        StyleList[index].Selected = true;

        _suppressSelectingStyleCallback = false;
    }

    private void SetColorSliderValues(GasTankColorValues colorValues)
    {
        // If we're setting the colors manually, don't send the callback which might eventually cause re-entrance to
        // this function.
        _suppressChangingColorsCallbackAndPreviewUpdate = true;

        TankColor.Color = colorValues.TankColor;
        MiddleStripeColor.Color = colorValues.MiddleStripeColor ?? Color.White;
        UseMiddleStripe.Pressed = colorValues.MiddleStripeColor != null;
        LowerStripeColor.Color = colorValues.LowerStripeColor ?? Color.White;
        UseLowerStripe.Pressed = colorValues.LowerStripeColor != null;

        _suppressChangingColorsCallbackAndPreviewUpdate = false;
    }
}
