using System.Linq;
using System.Numerics;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Moffstation.BladeServer.UI;

[GenerateTypedNameReferences]
public sealed partial class BladeServerRackWindow : BaseWindow
{
    public event Action<int, GUIBoundKeyEventArgs>? OnBladeServerPressed;
    public event Action<int>? OnPowerPressed;
    public event Action<int>? OnEjectPressed;
    public event Action<int>? OnInsertPressed;

    public BladeServerRackWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        CloseButton.OnPressed += _ => Close();
    }

    public void PopulateSlots(IEnumerable<(EntityUid?, bool, bool)> slots)
    {
        Slots.RemoveAllChildren();

        foreach (var (index, (item, powered, locked)) in slots.Index())
        {
            var control = new BladeServerControl
            {
                Index = index,
                Entity = item,
            };
            control.OnPressed += args => OnBladeServerPressed?.Invoke(index, args);
            control.OnEjectPressed += () => OnEjectPressed?.Invoke(index);
            control.OnInsertPressed += () => OnInsertPressed?.Invoke(index);
            control.OnPowerPressed += () => OnPowerPressed?.Invoke(index);
            control.SetPowered(powered);
            control.SetLocked(locked);
            Slots.AddChild(control);
        }
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        return DragMode.Move;
    }
}
