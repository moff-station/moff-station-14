using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Moffstation.BladeServer.UI;

[GenerateTypedNameReferences]
public sealed partial class BladeServerControl : Control
{
    [Dependency] private readonly EntityManager _entMan = default!;

    public event Action<GUIBoundKeyEventArgs>? OnPressed;
    public event Action? OnEjectPressed;
    public event Action? OnInsertPressed;
    public event Action? OnPowerPressed;

    public int Index;

    public BladeServerControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        EntityViewButton.OnKeyBindDown += args => OnPressed?.Invoke(args);
        EjectButton.OnPressed += _ => OnEjectPressed?.Invoke();
        InsertButton.OnPressed += _ => OnInsertPressed?.Invoke();
        PowerButton.OnPressed += _ => OnPowerPressed?.Invoke();
    }

    public EntityUid? Entity
    {
        get => EntityView.UiEntity;
        set
        {
            var slotFilled = value != null;

            string contentLabel;
            if (!slotFilled)
            {
                contentLabel = Loc.GetString("moff-blade-server-rack-slot-empty");
            }
            else if (_entMan.TryGetComponent<MetaDataComponent>(value, out var meta))
            {
                contentLabel = meta.EntityName;
            }
            else
            {
                contentLabel = Loc.GetString("moff-blade-server-rack-slot-entity-unknown");
            }

            SlotLabel.Text = Loc.GetString(
                "moff-blade-server-rack-slot-status",
                ("index", Index + 1),
                ("content", contentLabel)
            );

            EjectButton.Disabled = !slotFilled;
            EjectButton.Visible = slotFilled;
            InsertButton.Disabled = slotFilled;
            InsertButton.Visible = !slotFilled;

            EntityView.SetEntity(value);
            EntityViewButton.Visible = slotFilled;
            EntityViewButton.Disabled = !slotFilled;

            EmptyEntitySlot.Visible = !slotFilled;
        }
    }

    public void SetPowered(bool powered)
    {
        PowerButton.Modulate = powered ? Color.White : Color.DarkGray;
    }

    public void SetLocked(bool locked)
    {
        EjectButton.Modulate = locked ? Color.DarkGray : Color.White;
        InsertButton.Modulate = locked ? Color.DarkGray : Color.White;
    }
}
