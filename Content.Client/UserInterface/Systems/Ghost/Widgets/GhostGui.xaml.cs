using Content.Client.Stylesheets;
using Content.Client.UserInterface.Systems.Ghost.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

// AXOLOTL: Imports for ghostrespawn
using Robust.Shared.Timing;
using Robust.Shared.Configuration;
using Content.Shared._Moffstation.CCVar;
using Robust.Shared.Player;

namespace Content.Client.UserInterface.Systems.Ghost.Widgets;

[GenerateTypedNameReferences]
public sealed partial class GhostGui : UIWidget
{
    public GhostTargetWindow TargetWindow { get; }

    public event Action? RequestWarpsPressed;
    public event Action? ReturnToBodyPressed;
    public event Action? GhostRolesPressed;
    private int _prevNumberRoles;

    // AXOLOTL: Respawn button
    [Dependency] private readonly IGameTiming _gameTiming = default!;
    [Dependency] private readonly IConfigurationManager _configurationManager = default!;
    [Dependency] private readonly ISharedPlayerManager _playerManager = default!;

    private TimeSpan? _timeOfDeath;
    private float _minTimeToRespawn;
    public _Moffstation.RespawnButton.GhostRespawnRulesWindow GhostRespawnRulesWindow { get; }
    public event Action? GhostRespawnPressed;

    public GhostGui()
    {
        RobustXamlLoader.Load(this);

        TargetWindow = new GhostTargetWindow();

        MouseFilter = MouseFilterMode.Ignore;

        GhostWarpButton.OnPressed += _ => RequestWarpsPressed?.Invoke();
        ReturnToBodyButton.OnPressed += _ => ReturnToBodyPressed?.Invoke();
        GhostRolesButton.OnPressed += _ => GhostRolesPressed?.Invoke();
        GhostRolesButton.OnPressed += _ => GhostRolesButton.StyleClasses.Remove(StyleBase.ButtonCaution);

        // AXOLOTL: Ghostrespawn
        GhostRespawnRulesWindow = new _Moffstation.RespawnButton.GhostRespawnRulesWindow();
        GhostRespawnRulesWindow.RespawnButton.OnPressed += _ => GhostRespawnPressed?.Invoke();
        GhostRespawnButton.OnPressed += _ => GhostRespawnRulesWindow.OpenCentered();
    }

    public void Hide()
    {
        TargetWindow.Close();
        Visible = false;
    }

    // AXOLOTL: Set time of death info
    public void Update(int? roles, bool? canReturnToBody, TimeSpan? timeOfDeath, float minTimeToRespawn)
    {
        ReturnToBodyButton.Disabled = !canReturnToBody ?? true;
        _timeOfDeath = timeOfDeath;
        _minTimeToRespawn = minTimeToRespawn;

        if (roles != null)
        {
            GhostRolesButton.Text = Loc.GetString("ghost-gui-ghost-roles-button", ("count", roles));

            if (roles > _prevNumberRoles)
            {
                GhostRolesButton.StyleClasses.Add(StyleBase.ButtonCaution);
            }

            _prevNumberRoles = (int)roles;
        }

        TargetWindow.Populate();
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        if (disposing)
        {
            TargetWindow.Dispose();
        }
    }

    // AXOLOTL: Required to make the ghost respawn timer tick
    protected override void FrameUpdate(FrameEventArgs args)
    {
        if (_timeOfDeath is null)
        {
            GhostRespawnButton.Text = Loc.GetString("ghost-gui-respawn-button-denied", ("time", "unknown"));
            GhostRespawnButton.Disabled = true;
            return;
        }

        if (_configurationManager.GetCVar(MoffCCVars.RespawnTime) == 0.0)
        {
            GhostRespawnButton.Text = Loc.GetString("respawn-disabled-general");
            GhostRespawnButton.Disabled = true;
            return;
        }

        if (_playerManager.PlayerCount > _configurationManager.GetCVar(MoffCCVars.MaxPlayersForRespawnButton))
        {
            GhostRespawnButton.Text = Loc.GetString("respawn-disabled-playercount");
            GhostRespawnButton.Disabled = true;
            return;
        }

        var delta = (_minTimeToRespawn - _gameTiming.CurTime.Subtract(_timeOfDeath.Value).TotalSeconds);
        if (delta <= 0)
        {
            GhostRespawnButton.Text = Loc.GetString("ghost-gui-respawn-button-allowed");
            GhostRespawnButton.Disabled = false;
        }
        else
        {
            GhostRespawnButton.Text = Loc.GetString("ghost-gui-respawn-button-denied", ("time", $"{delta:f1}"));
            GhostRespawnButton.Disabled = true;
        }
    }

    public void UpdateRespawn(TimeSpan? todd)
    {
        if (todd != null)
        {
            _timeOfDeath = todd;
            _minTimeToRespawn = _configurationManager.GetCVar(MoffCCVars.RespawnTime);
        }
    }
}
