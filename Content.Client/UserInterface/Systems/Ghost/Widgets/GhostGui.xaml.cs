using Content.Client.Stylesheets;
using Content.Client.UserInterface.Systems.Ghost.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing; // Moffstation
using Robust.Shared.Configuration;  // Moffstation
using Content.Shared._Moffstation.CCVar; // Moffstation

namespace Content.Client.UserInterface.Systems.Ghost.Widgets;

[GenerateTypedNameReferences]
public sealed partial class GhostGui : UIWidget
{
    public GhostTargetWindow TargetWindow { get; }

    public event Action? RequestWarpsPressed;
    public event Action? ReturnToBodyPressed;
    public event Action? GhostRolesPressed;
    private int _prevNumberRoles;

    // Moffstation - Start - Respawn button
    [Dependency] private readonly IGameTiming _gameTiming = default!;
    [Dependency] private readonly IConfigurationManager _configurationManager = default!;

    private TimeSpan? _timeOfDeath;
    public _Moffstation.RespawnButton.GhostRespawnRulesWindow GhostRespawnRulesWindow { get; }
    // Moffstation - End

    public GhostGui()
    {
        RobustXamlLoader.Load(this);

        TargetWindow = new GhostTargetWindow();

        MouseFilter = MouseFilterMode.Ignore;

        GhostWarpButton.OnPressed += _ => RequestWarpsPressed?.Invoke();
        ReturnToBodyButton.OnPressed += _ => ReturnToBodyPressed?.Invoke();
        GhostRolesButton.OnPressed += _ => GhostRolesPressed?.Invoke();
        GhostRolesButton.OnPressed += _ => GhostRolesButton.StyleClasses.Remove(StyleBase.ButtonCaution);

        // Moffstation - Start - Respawn button
        GhostRespawnRulesWindow = new _Moffstation.RespawnButton.GhostRespawnRulesWindow();
        GhostRespawnButton.OnPressed += _ => GhostRespawnRulesWindow.OpenCentered();
        // Moffstation - End
    }

    public void Hide()
    {
        TargetWindow.Close();
        Visible = false;
    }

    public void Update(int? roles, bool? canReturnToBody)
    {
        ReturnToBodyButton.Disabled = !canReturnToBody ?? true;

        if (roles != null)
        {
            GhostRolesButton.Text = Loc.GetString("ghost-gui-ghost-roles-button", ("count", roles));

            if (roles > _prevNumberRoles)
            {
                GhostRolesButton.StyleClasses.Add(StyleBase.ButtonCaution);
            }

            _prevNumberRoles = (int)roles;
        }

        TargetWindow.Populate();
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        if (disposing)
        {
            TargetWindow.Dispose();
        }
    }

    // Moffstation - Start - Respawn button
    protected override void FrameUpdate(FrameEventArgs args)
    {
        if (!_configurationManager.GetCVar(MoffCCVars.RespawningEnabled))
        {
            GhostRespawnButton.Text = Loc.GetString("respawn-disabled-general");
            GhostRespawnButton.Disabled = true;
            return;
        }

        var respawnDelay = TimeSpan.FromSeconds(_configurationManager.GetCVar(MoffCCVars.RespawnTime));
        var remainingTime = _timeOfDeath + respawnDelay - _gameTiming.CurTime;

        if (!remainingTime.HasValue || remainingTime <= TimeSpan.Zero)
        {
            GhostRespawnButton.Text = Loc.GetString("ghost-gui-respawn-button-label");
            GhostRespawnButton.Disabled = false;
            return;
        }

        GhostRespawnButton.Disabled = true;
        GhostRespawnButton.Text = remainingTime > TimeSpan.FromMinutes(3)
            ? Loc.GetString("ghost-gui-respawn-button-denied-minutes",
                ("time", $"{remainingTime.Value.TotalMinutes:f1}"))
            : Loc.GetString("ghost-gui-respawn-button-denied-seconds",
                ("time", $"{remainingTime.Value.TotalSeconds:f0}"));
    }

    public void UpdateTimeOfDeath(TimeSpan? timeOfDeath)
    {
        if (timeOfDeath != null)
        {
            _timeOfDeath = timeOfDeath;
        }
    }
    // Moffstation - End
}
